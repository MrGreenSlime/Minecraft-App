//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataImplementation.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DataImplementation.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to local pretty = require &quot;cc.pretty&quot;
        ///
        ///-- This function extract the items from both the playerside AE system and the colonyside AE system
        ///local function ExtractItems(peripherals, monitorWriter)
        ///    --Extract Playerside Items
        ///    monitorWriter.WriteLine(&quot;Extracting Item List from playerside AE system&quot;, peripherals.GetMonitor())
        ///    local items = peripherals.GetPlayerMeBridge().listItems()
        ///    local aeData = {}
        ///    aeData[&quot;playerSide&quot;] = items
        ///    --Extract Colonyside Items
        ///    monitorWriter.WriteLine( [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string aeInterface {
            get {
                return ResourceManager.GetString("aeInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- This function extracts the tasks from the colony
        ///local function ExtractTasks(peripherals, monitorWriter)
        ///    -- User info
        ///    monitorWriter.WriteLine(&quot;Extracting non builder requests from &quot; .. peripherals.GetColonyIntegrator().getColonyName(), peripherals.GetMonitor())
        ///
        ///    local requestData = {}
        ///    -- Add the colony name in the data
        ///    requestData[&quot;Name&quot;] = peripherals.GetColonyIntegrator().getColonyName()
        ///    requestData[&quot;fingerprint&quot;] = peripherals.GetColonyIntegrator().getColonyID()
        ///    -- [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string extractTasks {
            get {
                return ResourceManager.GetString("extractTasks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- This function opens the file given in the path parameter and then writes the data serialized as JSON to said file
        ///local function WriteJson(path, data)
        ///    local file = io.open(path, &quot;w+&quot;)
        ///    if file == nil then return end
        ///    file.write(file,textutils.serializeJSON(data, {allow_repetitions = true}))
        ///    io.close(file)
        ///end
        ///
        ///local function ReadJson(path)
        ///    local file = io.open(path, &quot;r&quot;)
        ///    if file == nil then return end
        ///    local data = file.read(file,&quot;a&quot;)
        ///    io.close(file)
        ///    return te [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string JsonFileHelper {
            get {
                return ResourceManager.GetString("JsonFileHelper", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- Instanciate both helper classes to help with jsonWriting and monitorWriting
        ///local jsonHelper = require(&quot;JsonFileHelper&quot;)
        ///local monitorWriter = require(&quot;monitorWriter&quot;)
        ///local pretty = require &quot;cc.pretty&quot;
        ///
        ///-- Instanciate and initialize the peripheral wrapper
        ///local peripherals = require(&quot;wrapPeripherals&quot;)
        ///peripherals.Initialize(monitorWriter)
        ///monitorWriter.Init(peripherals.GetMonitor())
        ///
        ///-- Instanciate colonyExtractor helper and ae helper
        ///local colonyExtractor = require(&quot;extractTasks&quot;)
        ///local aeI [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string main {
            get {
                return ResourceManager.GetString("main", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- Keep track of current y level on monitor and the maximum y height of the monitor
        ///local y = 1
        ///local maxSize = 0
        ///
        ///-- Initialize the monitor by clearing it, setting the text scale to 0.5 and setting the cursor on the first line after which the max y height is extracted
        ///local function Init(monitor)
        ///    monitor.clear()
        ///    monitor.setTextScale(0.5)
        ///    y = 1
        ///    monitor.setCursorPos(1,y)
        ///    local x,y1 = monitor.getSize()
        ///    maxSize = y1
        ///    print(maxSize)
        ///end
        ///
        ///-- This resets the monitor by cl [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string monitorWriter {
            get {
                return ResourceManager.GetString("monitorWriter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- Keep the different peripherals loaded
        ///local Monitor = nil
        ///local ColonyIntegrator = nil
        ///local PlayerSideMe = nil
        ///local PlayerSideMeInventory = nil
        ///local ColonySideMeInventory = nil
        ///local ColonySideMe = nil
        ///
        ///local MonitorWriter = nil
        ///local SleepTime = 5
        ///
        ///local JsonFileHelper = require(&quot;JsonFileHelper&quot;)
        ///local pretty = require &quot;cc.pretty&quot;
        ///
        ///-- Decision table with functions for each different kind of peripheral
        ///local peripheralTable = 
        ///{
        ///    -- This just sets the colonyIntegrator as the periph [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string wrapPeripherals {
            get {
                return ResourceManager.GetString("wrapPeripherals", resourceCulture);
            }
        }
    }
}
